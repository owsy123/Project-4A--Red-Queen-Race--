{"version":3,"sources":["App.js","serviceWorker.js","index.js"],"names":["App","firstBackground","useRef","secondBackground","firstForeground","secondForeground","aliceAnimation","useEffect","sceneryFrames","transform","sceneryTimingBackground","duration","iterations","Infinity","sceneryTimingForeground","firstBackgroundMovement","current","animate","currentTime","effect","getTiming","secondBackgroundMovement","firstForegroundMovement","secondForegroundMovement","aliceAnimationMovement","easing","direction","playbackRate","scenes","adjustPlaybackRate","forEach","animation","setInterval","window","addEventListener","className","id","src","srcSet","alt","ref","Boolean","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"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","file":"static/js/main.0efb641d.chunk.js","sourcesContent":["\n\nimport React, { useRef, useEffect } from 'react';\n// import logo from './logo.svg';\nimport './App.css';\n// import useWebAnimations from \"@wellyshen/use-web-animations\";\n// import { scryRenderedDOMComponentsWithClass } from 'react-dom/test-utils';\n\nfunction App() {\n  const firstBackground = useRef(null);\n  const secondBackground = useRef(null);\n  const firstForeground = useRef(null);\n  const secondForeground = useRef(null);\n  const aliceAnimation = useRef(null);\n  useEffect(() => {\n    var sceneryFrames = [\n      { transform: 'translateX(100%)' },\n      { transform: 'translateX(-100%)' },\n    ];\n\n    var sceneryTimingBackground = {\n      duration: 36000,\n      iterations: Infinity,\n    }\n\n    var sceneryTimingForeground = {\n      duration: 12000,\n      iterations: Infinity,\n    };\n\n    const spriteFrames = [\n      { transform: \"translateY(0)\" }, \n      { transform: \"translateY(-100%)\" }\n    ]\n\n    const firstBackgroundMovement = firstBackground.current.animate(sceneryFrames, sceneryTimingBackground);\n    firstBackgroundMovement.currentTime = firstBackgroundMovement.effect.getTiming().duration / 2;\n\n    const secondBackgroundMovement = secondBackground.current.animate(sceneryFrames, sceneryTimingBackground);\n\n    const firstForegroundMovement = firstForeground.current.animate(sceneryFrames, sceneryTimingForeground);\n    firstForegroundMovement.currentTime = firstForegroundMovement.effect.getTiming().duration / 2;\n\n    const secondForegroundMovement = secondForeground.current.animate(sceneryFrames, sceneryTimingForeground);\n\n    const aliceAnimationMovement = aliceAnimation.current.animate(spriteFrames, {\n      easing: 'steps(7,end)',\n      direction: 'reverse',\n      duration: 600,\n      playbackRate: 1,\n      iterations: Infinity,\n    });\n\n    var scenes = [firstForegroundMovement, secondForegroundMovement, firstBackgroundMovement, secondBackgroundMovement];\n\n    const adjustPlaybackRate = () => {\n      if(aliceAnimationMovement.playbackRate < .8) {\n        scenes.forEach((animation) => {\n          animation.playbackRate = aliceAnimationMovement.playbackRate/2*-1;\n          // console.log(animation.playbackRate);\n        })\n      } else if(aliceAnimationMovement.playbackRate > 1.2){\n        scenes.forEach((animation) => {\n          animation.playbackRate = aliceAnimationMovement.playbackRate/2;\n          // console.log(animation.playbackRate);\n        })\n      } else {\n        scenes.forEach((animation) => {\n          animation.playbackRate = 0;\n          // console.log(animation.playbackRate);\n        })\n      }\n    }\n\n    // setInterval(() => {\n    //   if(aliceAnimationMovement.playbackRate > .4) {\n    //     aliceAnimationMovement.playbackRate *= 0.9;\n    //   }\n    // })\n\n    // const goFaster = () => {\n    //   aliceAnimationMovement.playbackRate *= 1.1;\n    //   console.log(aliceAnimationMovement.playbackRate);\n    // }\n\n    setInterval(() => {\n      if (aliceAnimationMovement.playbackRate > .4) {\n        aliceAnimationMovement.playbackRate *= .9;\n      }\n      adjustPlaybackRate();\n    }, 3000)\n\n    const goFaster = () => {\n      aliceAnimationMovement.playbackRate *= 1.1;\n      adjustPlaybackRate();\n    }\n\n    window.addEventListener(\"click\", goFaster);\n  })\n  return (\n    <div className=\"wrapper\">\n      <div className=\"sky\"></div>\n      <div className=\"earth\">\n        <div id=\"red-queen_and_alice\">\n          <img id=\"red-queen_and_alice_sprite\" src=\"https://s3-us-west-2.amazonaws.com/s.cdpn.io/641/sprite_running-alice-queen_small.png\" srcSet=\"https://s3-us-west-2.amazonaws.com/s.cdpn.io/641/sprite_running-alice-queen.png 2x\" alt=\"Alice and the Red Queen running to stay in place.\" ref={aliceAnimation} />\n        </div>\n      </div>\n      <div className=\"scenery\" id=\"foreground1\" ref={firstForeground}>\n        <img id=\"palm3\" src=\"https://s3-us-west-2.amazonaws.com/s.cdpn.io/641/palm3_small.png\" srcSet=\"https://s3-us-west-2.amazonaws.com/s.cdpn.io/641/palm3.png 2x\" alt=\" \" />\n      </div>\n      <div className=\"scenery\" id=\"foreground2\" ref={secondForeground}>\n        <img id=\"bush\" src=\"https://s3-us-west-2.amazonaws.com/s.cdpn.io/641/bush_small.png\" srcSet=\"https://s3-us-west-2.amazonaws.com/s.cdpn.io/641/bush.png 2x\" alt=\" \" />\n        <img id=\"w_rook_upright\" src=\"https://s3-us-west-2.amazonaws.com/s.cdpn.io/641/w_rook_upright_small.png\" srcSet=\"https://s3-us-west-2.amazonaws.com/s.cdpn.io/641/w_rook_upright.png 2x\" alt=\" \" />\n      </div>\n      <div className=\"scenery\" id=\"background1\" ref={firstBackground}>\n        <img id=\"r_pawn_upright\" src=\"https://s3-us-west-2.amazonaws.com/s.cdpn.io/641/r_pawn_upright_small.png\" srcSet=\"https://s3-us-west-2.amazonaws.com/s.cdpn.io/641/r_pawn_upright.png 2x\" alt=\" \" />\n        <img id=\"w_rook\" src=\"https://s3-us-west-2.amazonaws.com/s.cdpn.io/641/w_rook_small.png\" srcSet=\"https://s3-us-west-2.amazonaws.com/s.cdpn.io/641/w_rook.png 2x\" alt=\" \" />\n        <img id=\"palm1\" src=\"https://s3-us-west-2.amazonaws.com/s.cdpn.io/641/palm1_small.png\" srcSet=\"https://s3-us-west-2.amazonaws.com/s.cdpn.io/641/palm1.png 2x\" alt=\" \" />\n      </div>\n      <div className=\"scenery\" id=\"background2\" ref={secondBackground}>\n        <img id=\"r_pawn\" src=\"https://s3-us-west-2.amazonaws.com/s.cdpn.io/641/r_pawn_small.png\" srcSet=\"https://s3-us-west-2.amazonaws.com/s.cdpn.io/641/r_pawn.png 2x\" alt=\" \" />\n        <img id=\"r_knight\" src=\"https://s3-us-west-2.amazonaws.com/s.cdpn.io/641/r_knight_small.png\" srcSet=\"https://s3-us-west-2.amazonaws.com/s.cdpn.io/641/r_knight.png 2x\" alt=\" \" />\n        <img id=\"palm2\" src=\"https://s3-us-west-2.amazonaws.com/s.cdpn.io/641/palm2_small.png\" srcSet=\"https://s3-us-west-2.amazonaws.com/s.cdpn.io/641/palm2.png 2x\" alt=\" \" />\n      </div>\n    </div>\n  );\n}\n\nexport default App;\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}